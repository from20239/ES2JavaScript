// Function to fetch user data
async function getUser(userId) {
    const response = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);
    if (!response.ok) throw new Error("Failed to fetch user data");
    return response.json();
  }
  
  // Function to fetch user posts
  async function getPosts(userId) {
    const response = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`);
    if (!response.ok) throw new Error("Failed to fetch user posts");
    return response.json();
  }
  
  // Function to fetch post comments
  async function getComments(postId) {
    const response = await fetch(`https://jsonplaceholder.typicode.com/comments?postId=${postId}`);
    if (!response.ok) throw new Error("Failed to fetch post comments");
    return response.json();
  }
  
  // Main function to fetch user data, posts, and comments, and process data using higher-order functions
  async function fetchUserData() {
    try {
      // 1. Fetch user data
      const user = await getUser(1); // Fetch data for user ID 1
      console.log("User Info:");
      console.log(JSON.stringify(user, null, 2)); // Format and print user data
  
      // 2. Fetch user posts
      const posts = await getPosts(user.id);
      console.log("User Posts:");
      console.log(JSON.stringify(posts, null, 2)); // Format and print posts
      
  
      // 3. Fetch comments for each post
      const postsWithComments = await Promise.all(
        posts.map(async post => {
          const comments = await getComments(post.id); // Fetch comments for the current post
          return { ...post, comments }; // Return post with comments
        })
      );
      console.log("comments for each post:", postsWithComments);
  
      // 4. Process data using higher-order functions
      // a. Extract post titles using map
      const postTitles = posts.map(post => post.title);
      console.log("All Post Titles:", postTitles);
  
      // b. Filter posts with more than 3 comments
      const popularPosts = postsWithComments.filter(post => post.comments.length > 3);
  
      // Extract post IDs of popular posts
      const popularPostIds = popularPosts.map(post => post.id);
      console.log("Post IDs with more than 3 comments:", popularPostIds);
  
      // c. Calculate total number of comments using reduce
      const totalComments = postsWithComments.reduce(
        (total, post) => total + post.comments.length,
        0
      );
      console.log("Total number of comments:", totalComments);
  
    } catch (error) {
      console.error("Error:", error);
    }
  }
  
  // Call the main function
  fetchUserData();